// This file is autogenerated: please see the codegen template "Options"
namespace pdftron{ namespace PDF{ 

inline DataExtractionOptions::DataExtractionOptions()
	: OptionsBase()
{
}

inline DataExtractionOptions::~DataExtractionOptions()
{
}


inline bool DataExtractionOptions::GetDeepLearningAssist()
{
	SDF::Obj found = m_dict.FindObj("DeepLearningAssist");
	if(found.IsValid())
	{
		return (found.GetBool());
	}
	return (false);
}

inline DataExtractionOptions& DataExtractionOptions::SetDeepLearningAssist(bool value)
{
	PDF::OptionsBase::PutBool(m_dict, "DeepLearningAssist", (value));
	return *this;
}


inline UString DataExtractionOptions::GetFormExtractionEngine()
{
	SDF::Obj found = m_dict.FindObj("FormExtractionEngine");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("Form");
}

inline DataExtractionOptions& DataExtractionOptions::SetFormExtractionEngine(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "FormExtractionEngine", (value));
	return *this;
}


inline UString DataExtractionOptions::GetLanguage()
{
	SDF::Obj found = m_dict.FindObj("Language");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline DataExtractionOptions& DataExtractionOptions::SetLanguage(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "Language", (value));
	return *this;
}


inline UString DataExtractionOptions::GetOverlappingFormFieldBehavior()
{
	SDF::Obj found = m_dict.FindObj("OverlappingFormFieldBehavior");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("KeepNew");
}

inline DataExtractionOptions& DataExtractionOptions::SetOverlappingFormFieldBehavior(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "OverlappingFormFieldBehavior", (value));
	return *this;
}


inline UString DataExtractionOptions::GetPDFPassword()
{
	SDF::Obj found = m_dict.FindObj("PDFPassword");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline DataExtractionOptions& DataExtractionOptions::SetPDFPassword(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "PDFPassword", (value));
	return *this;
}


inline UString DataExtractionOptions::GetPages()
{
	SDF::Obj found = m_dict.FindObj("Pages");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline DataExtractionOptions& DataExtractionOptions::SetPages(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "Pages", (value));
	return *this;
}


}
}
