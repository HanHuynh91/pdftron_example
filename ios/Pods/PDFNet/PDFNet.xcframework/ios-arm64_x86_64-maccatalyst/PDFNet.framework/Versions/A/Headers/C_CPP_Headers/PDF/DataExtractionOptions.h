// This file is autogenerated: please see the codegen template "Options"
#ifndef PDFTRON_H_CPPPDFDataExtractionOptions
#define PDFTRON_H_CPPPDFDataExtractionOptions

#include <PDF/OptionsBase.h>

namespace pdftron{ namespace PDF{ 

class DataExtractionOptions : public OptionsBase
{
public:
	DataExtractionOptions();
	~DataExtractionOptions();

	
	/**
	* Gets the value DeepLearningAssist from the options object
	* Specifies if Deep Learning is used with table recognition in the DocStructure engine. The default is false. When true, table recognition accuracy improves at the cost of increased processing time. This only affects the DocStructure engine.
	* @return a bool, the current value for DeepLearningAssist.
	*/
	bool GetDeepLearningAssist();

	/**
	* Sets the value for DeepLearningAssist in the options object
	* Specifies if Deep Learning is used with table recognition in the DocStructure engine. The default is false. When true, table recognition accuracy improves at the cost of increased processing time. This only affects the DocStructure engine.
	* @param value: the new value for DeepLearningAssist
	* @return this object, for call chaining
	*/
	DataExtractionOptions& SetDeepLearningAssist(bool value);

	
	/**
	* Gets the value FormExtractionEngine from the options object
	* Specifies the form extraction engine used in DetectAndAddFormFieldsToPDF, either 'Form' or 'FormKeyValue'. The default is 'Form'. Note: The 'FormKeyValue' engine is experimental and subject to change.
	* @return a UString, the current value for FormExtractionEngine.
	*/
	UString GetFormExtractionEngine();

	/**
	* Sets the value for FormExtractionEngine in the options object
	* Specifies the form extraction engine used in DetectAndAddFormFieldsToPDF, either 'Form' or 'FormKeyValue'. The default is 'Form'. Note: The 'FormKeyValue' engine is experimental and subject to change.
	* @param value: the new value for FormExtractionEngine
	* @return this object, for call chaining
	*/
	DataExtractionOptions& SetFormExtractionEngine(const UString& value);

	
	/**
	* Gets the value Language from the options object
	* Specifies the OCR language(s). Use 3-letter ISO 639-2 language codes, separated by spaces. Example: "eng deu spa fra". The default is English.
	* @return a UString, the current value for Language.
	*/
	UString GetLanguage();

	/**
	* Sets the value for Language in the options object
	* Specifies the OCR language(s). Use 3-letter ISO 639-2 language codes, separated by spaces. Example: "eng deu spa fra". The default is English.
	* @param value: the new value for Language
	* @return this object, for call chaining
	*/
	DataExtractionOptions& SetLanguage(const UString& value);

	
	/**
	* Gets the value OverlappingFormFieldBehavior from the options object
	* When a detected form field overlaps with an existing one, keep either the old field (value 'KeepOld'), or the new one (value 'KeepNew', default).
	* @return a UString, the current value for OverlappingFormFieldBehavior.
	*/
	UString GetOverlappingFormFieldBehavior();

	/**
	* Sets the value for OverlappingFormFieldBehavior in the options object
	* When a detected form field overlaps with an existing one, keep either the old field (value 'KeepOld'), or the new one (value 'KeepNew', default).
	* @param value: the new value for OverlappingFormFieldBehavior
	* @return this object, for call chaining
	*/
	DataExtractionOptions& SetOverlappingFormFieldBehavior(const UString& value);

	
	/**
	* Gets the value PDFPassword from the options object
	* Specifies the password if the PDF requires one. The default is no password.
	* @return a UString, the current value for PDFPassword.
	*/
	UString GetPDFPassword();

	/**
	* Sets the value for PDFPassword in the options object
	* Specifies the password if the PDF requires one. The default is no password.
	* @param value: the new value for PDFPassword
	* @return this object, for call chaining
	*/
	DataExtractionOptions& SetPDFPassword(const UString& value);

	
	/**
	* Gets the value Pages from the options object
	* Specifies a range of pages to be converted, such as "1-5". By default all pages are converted. The first page has the page number of 1.
	* @return a UString, the current value for Pages.
	*/
	UString GetPages();

	/**
	* Sets the value for Pages in the options object
	* Specifies a range of pages to be converted, such as "1-5". By default all pages are converted. The first page has the page number of 1.
	* @param value: the new value for Pages
	* @return this object, for call chaining
	*/
	DataExtractionOptions& SetPages(const UString& value);

	
};

}
}

#include "../Impl/DataExtractionOptions.inl"
#endif // PDFTRON_H_CPPPDFDataExtractionOptions
